# Helper packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for awesome graphics
library(visdat)   # for additional visualizations
install.packages("visdat")
install.packages("caret")
install.packages("recipes")
# Helper packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for awesome graphics
library(visdat)   # for additional visualizations
# Feature engineering packages
library(caret)    # for various ML tasks
library(recipes)  # for feature engineering tasks
AmesHousing::ames_raw %>%
is.na() %>%
reshape2::melt() %>%
ggplot(aes(Var2, Var1, fill=value)) +
geom_raster() +
coord_flip() +
scale_y_continuous(NULL, expand = c(0, 0)) +
scale_fill_grey(name = "",
labels = c("Present",
"Missing")) +
xlab("Observation") +
theme(axis.text.y  = element_text(size = 4))
# Ames housing data
ames <- AmesHousing::make_ames()
ames <- ames()
ames <- data(ames)
ames <- data(ames)
install.packages("AmesHousing")
library(AmesHousing)
# Access the Ames dataset
ames_data <- make_ames()
View(ames_data)
colnames(ames_data)
# Stratified sampling with the rsample package
set.seed(123)
split <- initial_split(ames_data, prop = 0.7,
strata = "Sale_Price")
library(rsample)   # for resampling procedures
library(h2o)       # for resampling and model training
install.packages("rsample")
install.packages("h2o")
# Helper packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for awesome graphics
# Modeling packages
library(caret)    # for cross-validation, etc.
library(rsample)   # for resampling procedures
library(h2o)       # for resampling and model training
# Model interpretability packages
library(vip)      # variable importance
library(AmesHousing)
# Access the Ames dataset
ames_data <- make_ames()
# Stratified sampling with the rsample package
set.seed(123)
split <- initial_split(ames_data, prop = 0.7,
strata = "Sale_Price")
ames_train  <- training(split)
ames_test   <- testing(split)
View(ames_test)
View(ames_train)
model1 <- lm(Sale_Price ~ Gr_Liv_Area, data = ames_train)
model1 <- lm(Sale_Price ~ Gr_Liv_Area, data = ames_train)
# Set global R options
options(scipen = 999)
# Set the graphical theme
ggplot2::theme_set(ggplot2::theme_light())
# Set global knitr chunk options
knitr::opts_chunk$set(
fig.align = "center",
fig.height = 3.5
)
ames <- AmesHousing::make_ames()
p1 <- model1 %>%
broom::augment() %>%
ggplot(aes(Gr_Liv_Area, Sale_Price)) +
geom_point(size = 1, alpha = 0.3) +
geom_smooth(se = FALSE, method = "lm") +
scale_y_continuous(labels = scales::dollar) +
ggtitle("Fitted regression line")
# Fitted regression line (restricted range)
p2 <- model1 %>%
broom::augment() %>%
ggplot(aes(Gr_Liv_Area, Sale_Price)) +
geom_segment(aes(x = Gr_Liv_Area, y = Sale_Price,
xend = Gr_Liv_Area, yend = .fitted),
alpha = 0.3) +
geom_point(size = 1, alpha = 0.3) +
geom_smooth(se = FALSE, method = "lm") +
scale_y_continuous(labels = scales::dollar) +
ggtitle("Fitted regression line (with residuals)")
# Side-by-side plots
grid.arrange(p1, p2, nrow = 1)
# Helper packages
library(dplyr)    # for data manipulation
library(ggplot2)  # for awesome graphics
# Modeling packages
library(caret)    # for cross-validation, etc.
library(rsample)   # for resampling procedures
library(h2o)       # for resampling and model training
# Fitted regression line (full training data)
p1 <- model1 %>%
broom::augment() %>%
ggplot(aes(Gr_Liv_Area, Sale_Price)) +
geom_point(size = 1, alpha = 0.3) +
geom_smooth(se = FALSE, method = "lm") +
scale_y_continuous(labels = scales::dollar) +
ggtitle("Fitted regression line")
# Fitted regression line (restricted range)
p2 <- model1 %>%
broom::augment() %>%
ggplot(aes(Gr_Liv_Area, Sale_Price)) +
geom_segment(aes(x = Gr_Liv_Area, y = Sale_Price,
xend = Gr_Liv_Area, yend = .fitted),
alpha = 0.3) +
geom_point(size = 1, alpha = 0.3) +
geom_smooth(se = FALSE, method = "lm") +
scale_y_continuous(labels = scales::dollar) +
ggtitle("Fitted regression line (with residuals)")
# Side-by-side plots
grid.arrange(p1, p2, nrow = 1)
p1
p2
